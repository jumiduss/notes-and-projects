Glossary: 

    1. Audio / Video Controller -> AVC
        A: The device users physically touch to send a signal onto the network.

    2. Audio / Video Head Unit -> AVHU
        A: The network signal processor, audio processor, steering wheel controller processor, wireless communications processor.
    
    3. Message Received Acknowledgement -> ACK or ACK message
        A: The reply that confirms a message was received on the bus network.
        B: Typically seen after an input signal is sent by the AVC to the AVHU. The AVHU replies with an ACK message.

Goals:

    1. Find all unique signals.
    2. Find the behavior / pattern of the Initialization sequence.
    3. Map the AVC's payload to the AVHU's action.

Notes:

    1. Find all unique signals.

        A. Five types of messages on the network.
            i: Initialization 
            ii: Cyclical Broadcast
            iii: Input Transmission - Type 1
            iv: Input Transmission - Type 2
            v: ACK

        B. Initialization
            i: Occurs on network start between the AVC and AVHU.
            ii: Need to further investigate the interaction within the log data.
            iii: Odd pattern on byte_field_two.

        C. Cyclical Broadcast
            i: Nodes on the bus network send a message every half second.
            ii: Specifically for the AVC and AVHU, they do not contain important data.
            iii: Messages could be used to show the controller is still connected to the bus. 

        D. Input Transmission - Type 1
            i: Is typically seen for ON / OFF input types. 
            ii: Sends a signal immediately on button press.
            iii: Sends another signal 0.1 seconds, after AVHU ACK, while the button remains pressed.
            iv: Sends a final signal 0.1 seconds after AVHU ACK once the button is released.
            v: Needs AVHU ACK  
            v: byte_two cycles from 0x10 to 0x70, incrementing by 0x10 every message.

        E. Input Transmission - Type 2
            i: Is typically seen for rotary dials / potentiometer input types.
            ii: Sends a signal immediately when the rotary / potentiometer is turned.
            iii: Sends another signal at least 0.1 seconds after
            iv: Signal payloads vary based on the number of dial / potentiometer steps per 0.1 seconds. 
            v: byte_two cycles from 0x10 to 0x70, incrementing by 0x10 every message.
            vi: The relevant payload values seem to from byte_field_one through byte_field_five.
            vii: byte_field_five's low byte varies from 0->2 based on the behavior in note '1.E.iv'.
        
        F: ACK
            i: Typically seen sent by the AVHU as a response to any "Input Transmission" message. 
            ii: The payload of the ACK message contains the same cycle value of byte_field_two as the "Input Transmission" message.
            iii: The relevant payload values seem to be byte_field_one and byte_field_two.

    2. Find the behavior / pattern of the Initialization sequence.

        A. Seems to occur only on the network's creation. Will add more notes once I begin further analysis.

    3. Map the AVC's payload to the AVHU's action.

        A. The inputs this project is targeting are solely from the bus_device_id 0x681.

        B. After Initialization, payloads seem to contain relevant data only from byte_field_one through byte_field_five.

        C. Use notes from the project "Canbus Program"'s file, "can multifunction switch id's and commands.txt". 

        D. Use included photo of the AVC's front.

        E. Correlate the position from the canbus program's file, and AVC's front photo.


Process to reach Each Goal:

    1. Find all unique device_id

        A. Select distinct device_id.

            SELECT DISTINCT device_id FROM frames
            ORDER BY device_id; 

            +-----------+
            | device_id |
            +-----------+
            | 0x601     |
            | 0x604     |
            | 0x60B     |
            | 0x60D     |
            | 0x610     |
            | 0x613     |
            | 0x621     |
            | 0x681     |
            | 0x6A1     |
            +-----------+

            As a list:
            ('0x601','0x604','0x60B','0x60D','0x610','0x613','0x621','0x681','0x6A1')

    2. Find all unique signals: Initialization

        A. Query frames.
            SELECT * FROM frames;
        
        B. Return time_stamp and value of frames where byte_eight is unique.
            SELECT time_stamp, byte_eight FROM frames WHERE byte_eight < 255;

            +------------+
            | time_stamp |
            +------------+
            |  100121502 |
            |  100151481 |
            |  100384695 |
            |  100396672 |
            |  100445374 |
            | 3409339170 |
            | 3409351158 |
            | 3409377310 |
            | 3409574804 |
            | 3409590649 |
            | 3650767038 |
            | 3650813010 |
            | 3650841183 |
            +------------+

        C. Return 50 messages after the first time_stamp in B, display '' if byte values = 255
            SELECT id, time_stamp, device_id,
                CASE 
                    WHEN byte_one = 255 THEN ''
                    ELSE LPAD(CONV(byte_one, 10, 16), 2, '0')
                END AS byte_one,
                CASE 
                    WHEN byte_two = 255 THEN ''
                    ELSE LPAD(CONV(byte_two, 10, 16), 2, '0')
                END AS byte_two,
                CASE 
                    WHEN byte_three = 255 THEN ''
                    ELSE LPAD(CONV(byte_three, 10, 16), 2, '0')
                END AS byte_three,
                CASE 
                    WHEN byte_four = 255 THEN ''
                    ELSE LPAD(CONV(byte_four, 10, 16), 2, '0')
                END AS byte_four,
                CASE 
                    WHEN byte_five = 255 THEN ''
                    ELSE LPAD(CONV(byte_five, 10, 16), 2, '0')
                END AS byte_five,
                CASE 
                    WHEN byte_six = 255 THEN ''
                    ELSE LPAD(CONV(byte_six, 10, 16), 2, '0')
                END AS byte_six,
                CASE 
                    WHEN byte_seven = 255 THEN ''
                    ELSE LPAD(CONV(byte_seven, 10, 16), 2, '0')
                END AS byte_seven,
                CASE 
                    WHEN byte_eight = 255 THEN ''
                    ELSE LPAD(CONV(byte_eight, 10, 16), 2, '0')
                END AS byte_eight,
                byte_string
             FROM frames WHERE time_stamp >= 100092821 LIMIT 50;


            After selectively removing already know periodic messages, this query returned:

                +----+------------+-----------+----------+----------+------------+-----------+-----------+----------+------------+------------+-------------------------+
                | id | time_stamp | device_id | byte_one | byte_two | byte_three | byte_four | byte_five | byte_six | byte_seven | byte_eight | byte_string             |
                +----+------------+-----------+----------+----------+------------+-----------+-----------+----------+------------+------------+-------------------------+
                | 29 |  100092821 | 0x601     | 03       | 00       | 00         | 21        |           |          |            |            | 03 00 00 21 FF FF FF FF |
                | 30 |  100107248 | 0x681     | E0       | 00       |            |           |           |          |            |            | E0 00 FF FF FF FF FF FF |

                | 31 |  100121502 | 0x681     | 07       | 00       | 00         | 20        | 0B        | 02       | 01         | 00         | 07 00 00 20 0B 02 01 00 |
                | 32 |  100121549 | 0x601     | E0       | 00       |            |           |           |          |            |            | E0 00 FF FF FF FF FF FF |
                
                | 33 |  100133163 | 0x601     | 03       | 10       | 00         | 2C        |           |          |            |            | 03 10 00 2C FF FF FF FF |
                | 34 |  100137429 | 0x681     | E0       | 10       |            |           |           |          |            |            | E0 10 FF FF FF FF FF FF |
                
                | 35 |  100151481 | 0x681     | 07       | 10       | 00         | 2C        | 0B        | 02       | 01         | 00         | 07 10 00 2C 0B 02 01 00 |
                | 36 |  100152808 | 0x601     | E0       | 10       |            |           |           |          |            |            | E0 10 FF FF FF FF FF FF |
                
                | 37 |  100173293 | 0x601     | 05       | 20       | 60         | 0D        | 00        | 00       |            |            | 05 20 60 0D 00 00 FF FF |
                | 38 |  100177785 | 0x681     | E0       | 20       |            |           |           |          |            |            | E0 20 FF FF FF FF FF FF |
                
                
                
                | 39 |  100348685 | 0x6A1     | F0       | 06       | 0A         | 01        |           |          |            |            | F0 06 0A 01 FF FF FF FF |
                | 40 |  100348947 | 0x621     | F1       | 00       | 0A         | 01        |           |          |            |            | F1 00 0A 01 FF FF FF FF |
                | 41 |  100360674 | 0x6A1     | F0       | 06       | 0A         | 01        |           |          |            |            | F0 06 0A 01 FF FF FF FF |


                | 42 |  100362549 | 0x621     | 03       | 00       | 00         | 21        |           |          |            |            | 03 00 00 21 FF FF FF FF |
                | 43 |  100372655 | 0x6A1     | E0       | 00       |            |           |           |          |            |            | E0 00 FF FF FF FF FF FF |

                | 44 |  100384695 | 0x6A1     | 07       | 00       | 00         | 20        | 00        | 05       | 02         | 00         | 07 00 00 20 00 05 02 00 |
                | 45 |  100384942 | 0x621     | E0       | 00       |            |           |           |          |            |            | E0 00 FF FF FF FF FF FF |

                | 52 |  100396672 | 0x6A1     | 07       | 10       | 00         | 2C        | 00        | 05       | 02         | 00         | 07 10 00 2C 00 05 02 00 |
                | 54 |  100423266 | 0x621     | E0       | 10       |            |           |           |          |            |            | E0 10 FF FF FF FF FF FF |
            
                | 55 |  100425077 | 0x6A1     | 04       | 20       | 80         | 0D        | 00        |          |            |            | 04 20 80 0D 00 FF FF FF |
                | 56 |  100443302 | 0x621     | E0       | 20       |            |           |           |          |            |            | E0 20 FF FF FF FF FF FF |
            
                | 57 |  100445374 | 0x6A1     | 07       | 30       | 60         | 0D        | 00        | 00       | 00         | 00         | 07 30 60 0D 00 00 00 00 |
                | 58 |  100463195 | 0x621     | E0       | 30       |            |           |           |          |            |            | E0 30 FF FF FF FF FF FF |
            
                | 59 |  100482769 | 0x621     | 03       | 10       | 00         | 2C        |           |          |            |            | 03 10 00 2C FF FF FF FF |
                | 60 |  100484822 | 0x6A1     | E0       | 10       |            |           |           |          |            |            | E0 10 FF FF FF FF FF FF |
                +----+------------+-----------+----------+----------+------------+-----------+-----------+----------+------------+------------+-------------------------+
        

        D. Return 50 messages after time_stamp '3409339170' in B, display '' if byte values = 255
            SELECT id, time_stamp, device_id,
                CASE 
                    WHEN byte_one = 255 THEN ''
                    ELSE LPAD(CONV(byte_one, 10, 16), 2, '0')
                END AS byte_one,
                CASE 
                    WHEN byte_two = 255 THEN ''
                    ELSE LPAD(CONV(byte_two, 10, 16), 2, '0')
                END AS byte_two,
                CASE 
                    WHEN byte_three = 255 THEN ''
                    ELSE LPAD(CONV(byte_three, 10, 16), 2, '0')
                END AS byte_three,
                CASE 
                    WHEN byte_four = 255 THEN ''
                    ELSE LPAD(CONV(byte_four, 10, 16), 2, '0')
                END AS byte_four,
                CASE 
                    WHEN byte_five = 255 THEN ''
                    ELSE LPAD(CONV(byte_five, 10, 16), 2, '0')
                END AS byte_five,
                CASE 
                    WHEN byte_six = 255 THEN ''
                    ELSE LPAD(CONV(byte_six, 10, 16), 2, '0')
                END AS byte_six,
                CASE 
                    WHEN byte_seven = 255 THEN ''
                    ELSE LPAD(CONV(byte_seven, 10, 16), 2, '0')
                END AS byte_seven,
                CASE 
                    WHEN byte_eight = 255 THEN ''
                    ELSE LPAD(CONV(byte_eight, 10, 16), 2, '0')
                END AS byte_eight,
                byte_string
             FROM frames WHERE time_stamp >= 3409315026 LIMIT 50;


        After selectively removing already know periodic messages, this query returned:

            +-------+------------+-----------+----------+----------+------------+-----------+-----------+----------+------------+------------+-------------------------+
            | id    | time_stamp | device_id | byte_one | byte_two | byte_three | byte_four | byte_five | byte_six | byte_seven | byte_eight | byte_string             |
            +-------+------------+-----------+----------+----------+------------+-----------+-----------+----------+------------+------------+-------------------------+
            | 71972 | 3409315026 | 0x621     | 03       | 00       | 00         | 21        |           |          |            |            | 03 00 00 21 FF FF FF FF |
            | 71974 | 3409327083 | 0x6A1     | E0       | 00       |            |           |           |          |            |            | E0 00 FF FF FF FF FF FF |

            | 71975 | 3409339170 | 0x6A1     | 07       | 00       | 00         | 20        | 00        | 05       | 02         | 00         | 07 00 00 20 00 05 02 00 |
            | 71976 | 3409339399 | 0x621     | E0       | 00       |            |           |           |          |            |            | E0 00 FF FF FF FF FF FF |

            | 71977 | 3409351158 | 0x6A1     | 07       | 10       | 00         | 2C        | 00        | 05       | 02         | 00         | 07 10 00 2C 00 05 02 00 |
            | 71978 | 3409355052 | 0x621     | E0       | 10       |            |           |           |          |            |            | E0 10 FF FF FF FF FF FF |

            | 71979 | 3409363658 | 0x6A1     | 04       | 20       | 80         | 0D        | 00        |          |            |            | 04 20 80 0D 00 FF FF FF |
            | 71980 | 3409375184 | 0x621     | E0       | 20       |            |           |           |          |            |            | E0 20 FF FF FF FF FF FF |

            | 71981 | 3409377310 | 0x6A1     | 07       | 30       | 60         | 0D        | 00        | 00       | 00         | 00         | 07 30 60 0D 00 00 00 00 |
            | 71982 | 3409395159 | 0x621     | E0       | 30       |            |           |           |          |            |            | E0 30 FF FF FF FF FF FF |

            | 71990 | 3409434573 | 0x621     | 03       | 10       | 00         | 2C        |           |          |            |            | 03 10 00 2C FF FF FF FF |
            | 71991 | 3409437094 | 0x6A1     | E0       | 10       |            |           |           |          |            |            | E0 10 FF FF FF FF FF FF |



            | 71992 | 3409530016 | 0x681     | F0       | 06       | 0A         | 01        |           |          |            |            | F0 06 0A 01 FF FF FF FF |
            | 71993 | 3409530255 | 0x601     | F1       | 00       | 0A         | 01        |           |          |            |            | F1 00 0A 01 FF FF FF FF |
            | 71994 | 3409544263 | 0x681     | F0       | 06       | 0A         | 01        |           |          |            |            | F0 06 0A 01 FF FF FF FF |


            | 71995 | 3409544726 | 0x601     | 03       | 00       | 00         | 21        |           |          |            |            | 03 00 00 21 FF FF FF FF |
            | 71996 | 3409560317 | 0x681     | E0       | 00       |            |           |           |          |            |            | E0 00 FF FF FF FF FF FF |

            | 71997 | 3409574804 | 0x681     | 07       | 00       | 00         | 20        | 0B        | 02       | 01         | 00         | 07 00 00 20 0B 02 01 00 |
            | 71998 | 3409574827 | 0x601     | E0       | 00       |            |           |           |          |            |            | E0 00 FF FF FF FF FF FF |

            | 71999 | 3409590649 | 0x681     | 07       | 10       | 00         | 2C        | 0B        | 02       | 01         | 00         | 07 10 00 2C 0B 02 01 00 |
            | 72000 | 3409595146 | 0x601     | E0       | 10       |            |           |           |          |            |            | E0 10 FF FF FF FF FF FF |

            | 72001 | 3409614602 | 0x601     | 03       | 10       | 00         | 2C        |           |          |            |            | 03 10 00 2C FF FF FF FF |
            | 72002 | 3409620124 | 0x681     | E0       | 10       |            |           |           |          |            |            | E0 10 FF FF FF FF FF FF |

            | 72003 | 3409634505 | 0x601     | 05       | 20       | 60         | 0D        | 00        | 00       |            |            | 05 20 60 0D 00 00 FF FF |
            | 72004 | 3409640033 | 0x681     | E0       | 20       |            |           |           |          |            |            | E0 20 FF FF FF FF FF FF |

            | 72005 | 3409656423 | 0x601     | 05       | 30       | 60         | 0D        | A2        | 88       |            |            | 05 30 60 0D A2 88 FF FF |
            | 72006 | 3409660696 | 0x681     | E0       | 30       |            |           |           |          |            |            | E0 30 FF FF FF FF FF FF |
            +-------+------------+-----------+----------+----------+------------+-----------+-----------+----------+------------+------------+-------------------------+
        
        E. Post query analysis:

            i. 0x601 and 0x621 begin initialization the the data-payload of '03 00 00 21 FF FF FF FF'.
            ii. 0x681 and 0x6A1 reply with the data-payload structure of '07 cycle_byte 00 xx xx xx xx' 
            iii. 0x681 and 0x6A1 change their byte 4 from 20 to 2C 
            iv. 0x681 replies with 'xx xx xx xx 0B 02 01 00' as what seems to be it's controller ID.
            v. 0x6A1 replies with 'xx xx xx xx 00 05 02 00' as what seems to be it's controller ID.

    3. Find all unique signals: Cyclical Broadcast

        A. Query frames.
            SELECT * FROM frames;

        B. Find the count of each message.
            SELECT id, device_id, byte_string, COUNT(id) AS "count"
            FROM frames
            GROUP BY byte_string, device_id
            ORDER BY count DESC;

            After cleaning up messaged outputs by occurrence 
            +-------+-----------+-------------------------+-------+
            | id    | device_id | byte_string             | count |
            +-------+-----------+-------------------------+-------+
            |     1 | 0x6A1     | F0 06 0A 01 FF FF FF FF |  7052 |
            |     2 | 0x681     | F0 06 0A 01 FF FF FF FF |  6939 |
            |     7 | 0x613     | F1 00 0A 01 FF FF FF FF |  6906 |
            |    49 | 0x60D     | F1 00 0A 01 FF FF FF FF |  6894 |
            |    47 | 0x604     | F1 00 0A 01 FF FF FF FF |  6894 |
            |    50 | 0x610     | F1 00 0A 01 FF FF FF FF |  6894 |
            |    40 | 0x621     | F1 00 0A 01 FF FF FF FF |  6894 |
            |    48 | 0x60B     | F1 00 0A 01 FF FF FF FF |  6894 |
            |    27 | 0x601     | F1 00 0A 01 FF FF FF FF |  6894 |
            +-------+-----------+-------------------------+-------+
        
        C. Analysis

            Device id's 0x681 and 0x6A1 have a periodic message of 'F0 06 0A 01 FF FF FF FF'.

            All other bus devices have a periodic message of 'F1 00 0A 01 FF FF FF FF'.
        
    4.  Find all unique signals: Input Transmission - Type 1

        A. Query frames.
            SELECT * FROM frames;
        
        B. Regroup byte_string without byte_two.

            SELECT 
                id,
                device_id,
                CONCAT(LEFT(byte_string, 3), RIGHT(byte_string, 17)) AS 'byte_str',
                COUNT(id) AS 'count'
            FROM frames
            GROUP BY device_id, byte_string
            ORDER BY count DESC;

        C. Group messages by their device_id, then byte_str.

            SELECT 
                device_id,
                CONCAT(LEFT(byte_string, 3), RIGHT(byte_string, 17)) AS 'byte_str',
                COUNT(CONCAT(LEFT(byte_string, 3), RIGHT(byte_string, 17))) AS count
            FROM frames
            GROUP BY device_id, byte_str;
        
            After removing messages from 2 and 3:
            
            +-----------+----------------------+-------+
            | device_id | byte_str             | count |
            +-----------+----------------------+-------+
            | 0x601     | 03 00 21 FF FF FF FF |     2 |
            | 0x601     | 03 00 2C FF FF FF FF |     2 |
            | 0x601     | 05 60 0D 00 00 FF FF |     4 |
            | 0x601     | 05 60 0D 20 00 FF FF |     3 |
            | 0x601     | 05 60 0D 20 88 FF FF |     3 |
            | 0x601     | 05 60 0D 22 00 FF FF |     1 |
            | 0x601     | 05 60 0D 62 88 FF FF |     2 |
            | 0x601     | 05 60 0D 82 88 FF FF |     2 |
            | 0x601     | 05 60 0D A0 10 FF FF |     1 |
            | 0x601     | 05 60 0D A0 20 FF FF |     1 |
            | 0x601     | 05 60 0D A0 88 FF FF |     7 |
            | 0x601     | 05 60 0D A2 88 FF FF |     8 |
            | 0x601     | 05 60 0D A4 00 FF FF |     2 |
            | 0x601     | 05 60 0D B2 88 FF FF |     2 |
            | 0x601     | 05 60 0D E0 08 FF FF |     2 |
            | 0x601     | 05 60 0D E2 08 FF FF |     1 |
            | 0x601     | 05 60 0D E2 88 FF FF |     5 |
            | 0x621     | 03 00 21 FF FF FF FF |     3 |
            | 0x621     | 03 00 2C FF FF FF FF |     3 |
            | 0x621     | E0 FF FF FF FF FF FF |    15 |
            | 0x681     | 03 20 0D FF FF FF FF |    43 |
            | 0x681     | 04 40 0D 00 FF FF FF |     8 |
            | 0x681     | 04 40 0D 01 FF FF FF |     2 |
            | 0x681     | 04 40 0D 02 FF FF FF |     3 |
            | 0x681     | 04 40 0D 03 FF FF FF |     6 |
            | 0x681     | 04 40 0D 04 FF FF FF |     2 |
            | 0x681     | 04 40 0D 05 FF FF FF |     5 |
            | 0x681     | 04 40 0D 06 FF FF FF |     2 |
            | 0x681     | 04 40 0D 07 FF FF FF |     5 |
            | 0x681     | 04 40 0D 08 FF FF FF |     2 |
            | 0x681     | 04 40 0D 09 FF FF FF |     2 |
            | 0x681     | 04 40 0D 0A FF FF FF |     5 |
            | 0x681     | 04 40 0D 0B FF FF FF |     1 |
            | 0x681     | 04 40 0D 0C FF FF FF |     1 |
            | 0x681     | 04 40 0D 0D FF FF FF |     3 |
            | 0x681     | 04 40 0D 0E FF FF FF |     1 |
            | 0x681     | 04 40 0D 0F FF FF FF |     2 |
            | 0x681     | 04 40 0D 10 FF FF FF |     3 |
            | 0x681     | 04 40 0D 11 FF FF FF |     5 |
            | 0x681     | 04 40 0D 12 FF FF FF |     3 |
            | 0x681     | 04 40 0D 14 FF FF FF |     2 |
            | 0x681     | 04 40 0D 15 FF FF FF |     5 |
            | 0x681     | 04 40 0D 1B FF FF FF |    11 |
            | 0x681     | 04 40 0D 1C FF FF FF |     3 |
            | 0x681     | 04 40 0D 1D FF FF FF |     2 |
            | 0x681     | 04 40 0D 20 FF FF FF |    15 |
            | 0x681     | 04 40 0D 35 FF FF FF |     6 |
            | 0x681     | 04 40 0D 36 FF FF FF |     9 |
            | 0x681     | 04 40 0D 80 FF FF FF |   212 |
            | 0x681     | 04 40 0D 81 FF FF FF |    51 |
            | 0x681     | 04 40 0D 82 FF FF FF |    24 |
            | 0x681     | 04 40 0D 83 FF FF FF |   167 |
            | 0x681     | 04 40 0D 84 FF FF FF |    43 |
            | 0x681     | 04 40 0D 85 FF FF FF |    60 |
            | 0x681     | 04 40 0D 86 FF FF FF |    69 |
            | 0x681     | 04 40 0D 87 FF FF FF |    71 |
            | 0x681     | 04 40 0D 88 FF FF FF |    36 |
            | 0x681     | 04 40 0D 89 FF FF FF |    43 |
            | 0x681     | 04 40 0D 8A FF FF FF |    51 |
            | 0x681     | 04 40 0D 8B FF FF FF |    60 |
            | 0x681     | 04 40 0D 8C FF FF FF |    33 |
            | 0x681     | 04 40 0D 8D FF FF FF |    71 |
            | 0x681     | 04 40 0D 8E FF FF FF |    30 |
            | 0x681     | 04 40 0D 8F FF FF FF |    62 |
            | 0x681     | 04 40 0D 90 FF FF FF |    30 |
            | 0x681     | 04 40 0D 91 FF FF FF |   115 |
            | 0x681     | 04 40 0D 92 FF FF FF |    36 |
            | 0x681     | 04 40 0D 94 FF FF FF |    16 |
            | 0x681     | 04 40 0D 95 FF FF FF |    90 |
            | 0x681     | 04 40 0D 9B FF FF FF |   119 |
            | 0x681     | 04 40 0D 9C FF FF FF |    65 |
            | 0x681     | 04 40 0D 9D FF FF FF |   117 |
            | 0x681     | 04 40 0D A0 FF FF FF |   168 |
            | 0x681     | 04 40 0D B5 FF FF FF |    94 |
            | 0x681     | 04 40 0D B6 FF FF FF |    94 |
            | 0x681     | 04 40 2D 03 FF FF FF |     2 |
            | 0x681     | 04 40 2D 05 FF FF FF |     9 |
            | 0x681     | 04 40 2D 06 FF FF FF |     5 |
            | 0x681     | 04 40 2D 07 FF FF FF |     1 |
            | 0x681     | 04 40 2D 08 FF FF FF |     3 |
            | 0x681     | 04 40 2D 0A FF FF FF |    14 |
            | 0x681     | 04 40 2D 0B FF FF FF |     4 |
            | 0x681     | 04 40 2D 0F FF FF FF |     8 |
            | 0x681     | 04 40 2D 14 FF FF FF |     2 |
            | 0x681     | 04 40 2D 83 FF FF FF |    48 |
            | 0x681     | 04 40 2D 85 FF FF FF |   155 |
            | 0x681     | 04 40 2D 86 FF FF FF |   114 |
            | 0x681     | 04 40 2D 87 FF FF FF |    17 |
            | 0x681     | 04 40 2D 88 FF FF FF |    21 |
            | 0x681     | 04 40 2D 8A FF FF FF |   194 |
            | 0x681     | 04 40 2D 8B FF FF FF |    57 |
            | 0x681     | 04 40 2D 8F FF FF FF |   133 |
            | 0x681     | 04 40 2D 94 FF FF FF |    34 |
            | 0x681     | 04 40 4D 00 FF FF FF |     5 |
            | 0x681     | 04 40 4D 01 FF FF FF |     5 |
            | 0x681     | 04 40 4D 02 FF FF FF |    18 |
            | 0x681     | 04 40 4D 03 FF FF FF |     1 |
            | 0x681     | 04 40 4D 04 FF FF FF |     1 |
            | 0x681     | 04 40 4D 05 FF FF FF |     3 |
            | 0x681     | 04 40 4D 06 FF FF FF |     3 |
            | 0x681     | 04 40 4D 07 FF FF FF |     5 |
            | 0x681     | 04 40 4D 80 FF FF FF |    85 |
            | 0x681     | 04 40 4D 81 FF FF FF |   142 |
            | 0x681     | 04 40 4D 82 FF FF FF |   406 |
            | 0x681     | 04 40 4D 83 FF FF FF |    21 |
            | 0x681     | 04 40 4D 84 FF FF FF |    31 |
            | 0x681     | 04 40 4D 85 FF FF FF |    50 |
            | 0x681     | 04 40 4D 86 FF FF FF |    69 |
            | 0x681     | 04 40 4D 87 FF FF FF |    74 |
            | 0x681     | 04 80 0D 01 FF FF FF |   627 |
            | 0x681     | 04 80 0D 02 FF FF FF |     6 |
            | 0x681     | 04 80 0D 11 FF FF FF |   260 |
            | 0x681     | 04 80 0D 12 FF FF FF |    71 |
            | 0x681     | 04 80 0D 13 FF FF FF |    65 |
            | 0x681     | 04 80 0D 21 FF FF FF |   151 |
            | 0x681     | 04 80 0D 22 FF FF FF |    41 |
            | 0x681     | 04 80 0D 23 FF FF FF |    12 |
            | 0x681     | 04 80 0D 51 FF FF FF |    35 |
            | 0x681     | 04 80 0D 52 FF FF FF |     7 |
            | 0x681     | 04 80 0D 53 FF FF FF |    13 |
            | 0x681     | 04 80 0D 61 FF FF FF |    29 |
            | 0x681     | 04 80 0D 62 FF FF FF |     8 |
            | 0x681     | 04 80 0D 63 FF FF FF |     5 |
            | 0x681     | 04 80 0D 81 FF FF FF |   213 |
            | 0x681     | 04 80 0D 91 FF FF FF |   489 |
            | 0x681     | 04 80 0D 92 FF FF FF |   197 |
            | 0x681     | 04 80 0D 93 FF FF FF |   119 |
            | 0x681     | 04 80 0D A1 FF FF FF |   162 |
            | 0x681     | 04 80 0D A2 FF FF FF |    38 |
            | 0x681     | 04 80 0D A3 FF FF FF |    21 |
            | 0x681     | 04 80 0D D1 FF FF FF |   160 |
            | 0x681     | 04 80 0D D2 FF FF FF |    15 |
            | 0x681     | 04 80 0D D3 FF FF FF |     8 |
            | 0x681     | 04 80 0D E1 FF FF FF |    93 |
            | 0x681     | 04 80 0D E2 FF FF FF |    11 |
            | 0x681     | 04 80 0D E3 FF FF FF |     3 |
            | 0x681     | E0 FF FF FF FF FF FF |    48 |
            | 0x6A1     | 04 80 0D 00 FF FF FF |     6 |
            | 0x6A1     | 07 00 20 00 05 02 00 |     3 |
            | 0x6A1     | 07 00 2C 00 05 02 00 |     3 |
            | 0x6A1     | 07 60 0D 00 00 00 00 |     3 |
            | 0x6A1     | E0 FF FF FF FF FF FF |     6 |
            +-----------+----------------------+-------+