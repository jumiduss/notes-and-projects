CBV - Class Based Views

Hello World Code Along
    1. Create path to template and add app inside settings.py
    2. Create and insert into templates/base.html index.html
        base.html
        <!DOCTYPE html>
        <html>
            <head>
                <meta charset="utf-8">
                <title>Base</title>
                <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
            </head>
            <body>
                <div class="container">
                    {% block body_block %}
                    {% endblock %}
                </div>    
            </body>
        </html>
        index.html
        {% extends "base.html" %}
        {% block body_block %}
            <h1>Hello World! Index Page Home</h1>
        {% endblock %}
    3. Edit views.py
        from django.shortcuts import render
        def index(request):
            return render(request,'index.html')
    4. Edit urls.py
        from django.urls import path
        from django.contrib import admin
        from basic_app import views
        urlpatterns = [
            path('admin/',admin.site.urls),
            path('',views.index)
        ]
    5. Run server to check for errors
    6. Edit views.py to show the class view
        from django.views.generic import View
        from django.http import HttpResponse
        #delete all previous views and add the following
        class CBView(View):
            def get(self,request):
                return HttpResponse("Class Based Views Are Cool!")
    7. Delete the view path in urls.py and add
        path('',views.CBView.as_view())
            
CBView Templates Code Along
    Note, Differences Between Classes and Functions
        Classes - class IndexView(TemplateView):
                      template_name = 'index.html'
        Functions - def index(request):
                       return render(request, 'index.html')
    1. Delete views.py and enter
        from django.shortcuts import render
        from django.views.generic import View,TemplateView

        class IndexView(TemplateView):
            template_name = 'index.html'
    2. Update path(view) in urls.py
        path('',views.IndexView.as_view())
    3. Update index.html Header with Testing Template 
    4. Add injection to index.html
        <h2>Injected Content: {{ injectme }}</h2>
    5. Add method within IndexView in views.py
        Note: Args help prepare functions to accept more than one argument
        def get_content_data(self,**kwargs) # *args (aka arguments - tuple) or **kwargs (keyword arguments - dictionary)
        context = super().get_context_data(**kwargs)
        context['injectme'] = 'BASIC INJECTION'
        return context
Views Code Along
    Using 2 View Classes: Detail and List
    1. Create models.py
        from django.db import models
        
        class School(models.Model):
            name = models.CharField(max_length=256)
            principal = models.CharField(max_length=256)
            location = models.CharField(max_length=256)

            def __str__(self):
                return self.name

        class Student(models.Model):
            name = models.CharField(max_length=256)
            age = models.PositiveIntegerField()
            school = models.ForeignKey(School,related_name='students')

            def __str__(self):
                return self.name
    2. Start the serveradd two schools, add two kids per school, closer server
    3. Create a new templates folder in the application folder, and a subfolder with the app name
    4. Create 3 html files and populate them within this new templates folder
        basic_app_base.html
        school_detail.html
        school_list.html
    5. Remake the views.py file
        from django.shortcuts import render
        from django.views.generic import View,TemplateView,ListView,DetailView
        from . import models

        class SchoolListView(ListView):
            model = models.school
        
        class SchoolDetailView(DetailView):
            model = models.School
            template_name = 'basic_app/school_detail.html'
    6. Add a navigation bar to the index.html file in root template folder, then copy it to the application's base.html
        #This is buggy due to different versions of bootstrap`
    7. Add Jumbotron to root's index.html
    8. Write out the extension the app's html templates
        #school_list.html
        {% extends "basic_app/basic_app_base.html" %}
        {% block body_block %}
            <div class="jumbotron">
                <h1>Welcome to a list of all the schools!</h1>
                <ol>
                    {% for school in school_list %}
                        <h2><li>{{ school.name }} </li></h2>
                    {% endfor %}
                </ol>
            </div>
        {% endblock %}

        #school_detail.html
        {% extends "basic_app/basic_app_base.html" %}
        {% block body_block %}
            <div class="jumbotron">
                <h1>Welcome to the School Detail Page!</h1>
                <h2>School Details:</h2>
                <p>Name: {{ school_detail.name }}</p>
                <p>Principal: {{ school_detail.principal }}</p>
                <p>Location: {{ school_detail.location }}</p>
            </div>
        {% endblock %}

    9. Add an object name (if you like) in views.py and replace the varName school_list above.
        from django.shortcuts import render
        from django.views.generic import View,TemplateView,ListView,DetailView
        from . import models
        
        class IndexView(TemplateView):
            template_name = 'index.html'
        
        class SchoolListView(ListView):
            context_object_name = 'schools'
            model = models.School
        
        class SchoolDetailView(DetailView):
            context_object_name = 'school_detail'
            model = models.School
            template_name = 'basic_app/school_detail.html'
    10. Add path to basic_app urls in project urls
        path('basic_app/',include('basic_app.urls',namespace='basic_app'))
    11. Create urls.py for your application
        from django.urls import path
        from basic_app import views

        app_name = 'basic_app'
        urlpatterns = [
        path('',views.SchoolListView.as_view(),name='list')
        ]
    12. Runserver to test the code you wrote.
    13. Update the school_list to include hyperlink to school
        {% for school in schools %}
            <h2><li><a href="{{ school.id }}">{{ school.name }}</a></li></h2>
        {% endfor %}
    14. Add students to school_detail.html
        <h3>Students:</h3>
        {% for student in school_detail.students.all %}
            <p>{{ student.name }} who is {{ student.age }} years old. </p>
        {% endfor %} 
    15. Add path to the app's urls.py
        path('<int:pk>/',views.SchoolDetailView.as_view(),name='detail'),

CRUD Views Code Along
    CRUD - Create Retrieve Update Delete
        The four basic functions most websites provide their admins and users 
        Class based views make this very easy

    1. Can add multiple views on different lines with parenthesis (in views.py)
    ...
    ... import (View, TemplateView,
                ListView,DetailView,
                CreateView,UpdateView,
                DeleteView)
        ...
        class SchoolCreateView(CreateView):
            fields = ('name','principal','location')
            model = models.School
    2. Link the new view to urls.py
        ...
        path('create/',views.SchoolCreateView.as_view(),name='create'),
    3. Create school_form.html
        {% extends "basic_app/basic_app_base.html" %}
        {% block body_block %}
        <h1>
            {% if not form.instance.pk %}
            Create School
            {% else %}
            Update School
            {% endif %}
        </h1>

        <form method="post">
            {% csrf_token %}
            {{ form.as_p }}
            <input type="submit" class="btn btn-primary" value="Submit">
        </form>
        {% endblock %}
    4. Define a get absolute url for the model, and add a new update class
        models.py
        from django.urls import reverse
        def get_absolute_url(self):
            return reverse("basic_app:detail",kwargs={'pk':self.pk})
        ...
        class SchoolUpdateView(UpdateView):
            fields = ('name','principal')
            model = models.School
    5. Add update url to app's urls.py
        path('update/<int:pk>',views.SchoolUpdateView.as_view(),name='update')
    6. Add update button to school_detail.html
        <div class="container">
            <p><a class = 'btn btn-warning' href="{% url 'basic_app:update' pk=school_detail.pk %}">Update</a></p>
        </div>
    7. Add delete to views.py and delete to school_detail.html
        views.py
        from django.urls import reverse_lazy
        class SchoolDeleteView(DeleteView)
            model = models.School
            success_url = reverse_lazy("basic_app:list")
        urls.py
        path('delete/<int:pk>',views.SchoolDeleteView.as_view(),name='delete')
    8. Add Delete Confirmation html school_confirm_delete.html and update the urls.py with delete entry and views.py
        school_confirm_delete.html
        {% extends "basic_app/basic_app_base.html" %}
        {% block body_block %}
        <h1>Delete {{ school.name }}?</h1>
        <form method="post">
            {% csrf_token %}
            <input type="submit" class="btn btn-danger" value="Delete">
            <a href="{% url 'basic_app:detail' pk=school.pk %}">Cancel</a>
        </form>
        {% endblock %}

        urls.py
        path('<int:pk>/delete',views.SchoolDeleteView.as_view(),name='delete')

        views.py
        class SchoolDeleteView(DeleteView):
            model = models.School
            success_url = reverse_lazy("basic_app:list")


