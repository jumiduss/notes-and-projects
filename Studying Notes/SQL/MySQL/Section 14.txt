Many to Many Relationships - Code Along Chapter

    ex:

        Table 1: Reviewers
            id
            first_name
            last_name
        Table 2: Review
            id
            rating
            series_id
            reviewer_id
        Table 3: Series
            id
            title
            released_year
            genre
    
    Creating Our Tables

        CREATE TABLE reviewers (
            id INT PRIMARY KEY AUTO_INCREMENT,
            first_name VARCHAR(50) NOT NULL,
            last_name VARCHAR(50) NOT NULL
        );

        CREATE TABLE series (
            id INT PRIMARY KEY AUTO_INCREMENT,
            title VARCHAR(100),
            released_year YEAR,
            genre VARCHAR(100)
        );

        CREATE TABLE reviews (
            id INT PRIMARY KEY AUTO_INCREMENT,
            rating DECIMAL(2,1),
            series_id INT,
            reviewer_id INT,
            FOREIGN KEY (series_id) REFERENCES series(id),
            FOREIGN KEY (reviewer_id) REFERENCES reviewers.id    
        )

    Inserting Our Data
        INSERT INTO series (title, released_year, genre) VALUES
            ('Archer', 2009, 'Animation'),
            ('Arrested Development', 2003, 'Comedy'),
            ("Bob's Burgers", 2011, 'Animation'),
            ('Bojack Horseman', 2014, 'Animation'),
            ("Breaking Bad", 2008, 'Drama'),
            ('Curb Your Enthusiasm', 2000, 'Comedy'),
            ("Fargo", 2014, 'Drama'),
            ('Freaks and Geeks', 1999, 'Comedy'),
            ('General Hospital', 1963, 'Drama'),
            ('Halt and Catch Fire', 2014, 'Drama'),
            ('Malcolm In The Middle', 2000, 'Comedy'),
            ('Pushing Daisies', 2007, 'Comedy'),
            ('Seinfeld', 1989, 'Comedy'),
            ('Stranger Things', 2016, 'Drama');
        
        
        INSERT INTO reviewers (first_name, last_name) VALUES
            ('Thomas', 'Stoneman'),
            ('Wyatt', 'Skaggs'),
            ('Kimbra', 'Masters'),
            ('Domingo', 'Cortes'),
            ('Colt', 'Steele'),
            ('Pinkie', 'Petit'),
            ('Marlon', 'Crafford');
            
        
        INSERT INTO reviews(series_id, reviewer_id, rating) VALUES
            (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
            (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
            (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
            (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
            (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
            (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
            (7,2,9.1),(7,5,9.7),
            (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
            (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
            (10,5,9.9),
            (13,3,8.0),(13,4,7.2),
            (14,2,8.5),(14,3,8.9),(14,4,8.9);

    Queries

        1. Return <title> <rating>
            - This is an inner join.

            Showing Each Review and Title Separately:
                SELECT title FROM series;
                SELECT rating FROM reviews;
            
            Matching All Series to Their Reviews:
                SELECT * FROM series
                JOIN reviews ON series.id = reviews.series_id;

            Returning the Wanted Query;
                SELECT title FROM series
                JOIN reviews ON series.id = reviews.series_id;

        2. Return <title> <average_rating>  Ascend Sort Rating

            SELECT title, ROUND(AVG(rating), 2) AS avg_rating FROM series
            JOIN reviews ON series.id = reviews.series_id
            GROUP BY title
            ORDER BY avg_rating;

        3. Return <first_name> <last_name> <rating>

            SELECT first_name, last_name, rating FROM reviewers
            JOIN reviews ON reviews.reviewer_id = reviewers.id;

        4. Return <unreviewed_series>

            SELECT title FROM series
            LEFT JOIN reviews ON reviews.series_id = series.id
            WHERE rating IS NULL;

            or you could use:

            SELECT title AS unreviewed_series FROM reviews
            RIGHT JOIN series ON series.id = reviews.series_id
            WHERE rating is NULL;

        5. Return <genre> <average_rating>

            Process:
                A. Return all matching results between the two tables.
                    SELECT * FROM series
                    JOIN reviews ON series.id = reviews.series_id;
                
                B. Filter the relevant columns
                    SELECT genre, rating FROM series
                    JOIN reviews ON series.id = reviews.series_id;

                C. Group by genre
                    SELECT genre, rating FROM series
                    JOIN reviews ON series.id = reviews.series_id
                    GROUP BY genre;

                D. Average the ratings of each genre
                    SELECT genre, AVG(rating) AS avg_rating FROM series
                    JOIN reviews ON series.id = reviews.series_id
                    GROUP BY genre;
            
        6. Return <first_name> <last_name> <COUNT> <MIN> <MAX> <AVG> <STATUS>
            Status returns ACTIVE or INACTIVE based on whether the user has posted ANY review.

            Process:
                A. Return the join of both tables
                    SELECT * FROM reviewers
                    JOIN reviews ON reviewers.id = reviews.reviewer_id;

                B. Return the additional users who have no reviews
                    SELECT * FROM reviewers
                    LEFT JOIN reviews ON reviewers.id = reviews.reviewer_id;

                C. Return the first_name, last_name, and count columns
                    SELECT
                        first_name,
                        last_name,
                        COUNT(rating)
                    FROM reviewers
                    LEFT JOIN reviews ON reviewers.id = reviews.reviewer_id
                    GROUP BY first_name, last_name; 
                D. Return C plus the min, max, average ratings
                    SELECT
                        first_name,
                        last_name,
                        COUNT(rating) AS COUNT,
                        IFNULL(MIN(rating), 0) AS MIN,
                        IFNULL(MAX(rating), 0) AS MAX,
                        ROUND(IFNULL(AVG(rating), 0), 2) AS AVG
                    FROM reviewers
                    LEFT JOIN reviews ON reviewers.id = reviews.reviewer_id
                    GROUP BY first_name, last_name;
                
                E. Return D plus the status
                    Using CASE:

                        SELECT
                            first_name,
                            last_name,
                            COUNT(rating) AS count,
                            IFNULL(MIN(rating), 0) AS min,
                            IFNULL(MAX(rating), 0) AS max,
                            ROUND(IFNULL(AVG(rating), 0), 2) AS average,
                            CASE
                                WHEN COUNT(rating) > 0 THEN 'ACTIVE'
                                ELSE 'INACTIVE'
                            END AS status
                        FROM reviewers
                        LEFT JOIN reviews ON reviewers.id = reviews.reviewer_id
                        GROUP BY first_name, last_name;
                
                    Using IF

                        SELECT
                            first_name,
                            last_name,
                            COUNT(rating) AS count,
                            IFNULL(MIN(rating), 0) AS min,
                            IFNULL(MAX(rating), 0) AS max,
                            ROUND(IFNULL(AVG(rating), 0), 2) AS average,
                        IF(COUNT(rating) > 0, 'ACTIVE', 'INACTIVE') AS status
                        FROM reviewers
                        LEFT JOIN reviews ON reviewers.id = reviews.reviewer_id
                        GROUP BY first_name, last_name;

                F. Return the table sorted by max post count

                    SELECT
                        first_name,
                        last_name,
                        COUNT(rating) AS count,
                        IFNULL(MIN(rating), 0) AS min,
                        IFNULL(MAX(rating), 0) AS max,
                        ROUND(IFNULL(AVG(rating), 0), 2) AS average,
                        IF(COUNT(rating) > 0, 'ACTIVE', 'INACTIVE') AS status
                    FROM reviewers
                    LEFT JOIN reviews ON reviewers.id = reviews.reviewer_id
                    GROUP BY first_name, last_name
                    ORDER BY min DESC;

        7.  Return <title> <rating> <reviewer> - reviewer is the first and last name
            This is special because it uses two joins.

            Process:

                A. Join reviews and series
                    SELECT title, rating FROM reviews
                    JOIN series ON reviews.series_id = series.id;
                
                B. Join reviewers to A
                    SELECT * FROM reviews
                    INNER JOIN series ON reviews.series_id = series.id
                    INNER JOIN reviewers ON reviews.reviewer_id = reviewers.id;
                
                C. Filter the join columns
                    SELECT title, rating, CONCAT(first_name, ' ', last_name) AS reviewer_name FROM reviews
                    INNER JOIN series ON reviews.series_id = series.id
                    INNER JOIN reviewers ON reviews.reviewer_id = reviewers.id;

Bonus Functions

    ROUND(column_value, number_of_digits)